// CRUD Excersise 1 

Both gives same result Question.2

db.product_catalog.find(
  {
    "categories.sub": "washing machine",
    price: {$gte: 20000, $lte: 30000
    }
}
);

db.product_catalog.find(
  {$and: [
        {
            "categories.sub": "washing machine"
        },
        {price: {$gte: 20000, $lte: 30000
            }
        }
    ]
}
).sort({price: 1
}).pretty();; // price=1 means ascending order and -1 means descending order

3)Retrieve the details of mobiles whose manufacturer is either 'apple' or 'samsung' and its price should be within 60000
db.product_catalog.find(
  {$or: [
        {manufacturer: "apple"
        },
        {manufacturer: "samsung"
        }
    ],
    price: {$lte: 60000
    }
}
);

4)
db.product_catalog.find({publisher: {$regex:/^O'Reilly/
    }
});

2.1)
db.product_catalog.replaceOne({
    manufacturer: "Mi"
},
{
    "prodname": "Xiaomi Mi Max Prime",
    "manufacturer": "Xiaomi", price: 20000
});

2.2) using sort as done abv

2.3) 
db.product_catalog.find().skip(2).limit(3).pretty()

2.4)
db.product_catalog.find({manufacturer: "apple"
}).count();



// Excersise 2 
1)
db.employee.aggregate([
    {
      $group: {
          _id: {loc: "$loc"
            },
          total: {$sum: "$salary"
            }
        }
    },
    {
      $project: {_id: 0,loc: "$_id.loc",total: 1
        }
    }
])

2)
db.employee.aggregate([ //remember this array opening and closing at the bottom
    {
      $group: {
        _id: {loc: "$loc"
            },
        count: {
          $sum: 1
            }
        }
    },
    {
      $match: {
        count: {$gt: 1
            }
        }
    },
    {
      $project: {_id: 0,loc: "$_id.loc",count: 1
        }
    }
])

//Helpful link for conversion chart
//https://docs.mongodb.com/manual/reference/sql-aggregation-comparison/
/** 
    Excersise 4(Query and projection) 
                                        */
1.i) Added the $exists just to practice and see otherwise it returns full collection without shroff document

-- Also $not -> Remember that the $not operator only affects other operators
                 and cannot check fields and documents independently. 
                 So, use the $not operator for logical disjunctions 
                 and the $ne operator to test the contents of fields directly.

db.product_catalog.find(
    {$nor: [
        {publisher: "Shroff"
        }
    ],publisher: {$exists: true
    }
}
)

Alternate: and simple use $ne:-

db.product_catalog.find(
  {publisher: {$ne: "Shroff"
    }
}
)

1.ii)
db.product_catalog.find(
  {$or: [
        {price: {$gte: 1000,$lte: 20000
            }
        },
        {manufacturer: {$in: ['nike','reebok'
                ]
            }
        }
    ]
}
)

2)
db.product_catalog.find(
  {
    "categories.main": "shoes",colors: {$size: 2
    }
}
);

3) //check once again

db.product_catalog.remove(
  {
    "categories.main": "books",$nor: [
        {ISBN: 2323232, ISBN: 1979891
        }
    ]
}
  );

##################################
--------Update Excersise:---------
##################################

1)
db.product_catalog.updateMany({colors:"black"},{
$set: {
  "colors.$":"jet black"
}})


2)
db.product_catalog.update({prodname:"iphone 7"},{$set:{"date_of_launch":new Date()}})

3)
db.product_catalog.update({},{$rename:{"prodname":"productname"}})

4)
db.product_catalog.updateMany( {manufacturer:"nike"}, {$push:{colors:{$each:["red","purple"],$position:0} } } )


